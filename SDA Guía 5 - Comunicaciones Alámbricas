#include <Wire.h>                  // Librería para comunicación I2C
#include "MAX30105.h"               // Librería del sensor MAX30102
#include "heartRate.h"              // Librería para cálculo de ritmo cardíaco
#include "RTClib.h"                 // Librería para manejar el RTC DS1307
#include <LiquidCrystal_I2C.h>      // Librería para pantalla LCD I2C

MAX30105 particleSensor;            // Objeto para manejar el sensor MAX30102
RTC_DS1307 rtc;                     // Objeto para manejar el RTC DS1307
LiquidCrystal_I2C lcd(0x27, 16, 2); // Objeto para manejar la pantalla LCD (I2C dirección 0x27, 16x2 caracteres)

const byte RATE_SIZE = 4;            // Tamaño del arreglo para promediar BPM
byte rates[RATE_SIZE];               // Arreglo para almacenar las últimas lecturas de BPM
byte rateSpot = 0;                   // Posición actual en el arreglo de tasas
long lastBeat = 0;                   // Momento del último latido detectado
float beatsPerMinute;                // BPM actual
int beatAvg;                         // Promedio de BPM
float redAC = 0, redDC = 0, irAC = 0, irDC = 0; // Variables para cálculo de SpO2
float ratio, spo2;                   // Variables para la relación de absorción y valor de SpO₂

void setup() {
  Wire.begin(35, 36);                // Inicializa comunicación I2C en pines 35 (SDA) y 36 (SCL)
  lcd.init();                        // Inicializa la pantalla LCD
  lcd.backlight();                   // Enciende la luz de fondo de la LCD
  Serial.begin(115200);              // Inicializa el monitor serial a 115200 baudios

  if (!rtc.begin()) {                // Si no se detecta el RTC
    lcd.print("RTC no find");        // Muestra error en pantalla
    while (1);                       // Detiene el programa
  }
  if (!rtc.isrunning()) {            // Si el RTC no está corriendo
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__))); // Ajusta el RTC a la fecha y hora de compilación
  }

  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) { // Si no se detecta el sensor MAX30102
    lcd.print("Sensor no detect");   // Muestra error en pantalla
    while (1);                       // Detiene el programa
  }

  particleSensor.setup();            // Configura el sensor con valores por defecto
  particleSensor.setPulseAmplitudeRed(0x3F);  // Ajusta la intensidad del LED rojo
  particleSensor.setPulseAmplitudeIR(0x1F);   // Ajusta la intensidad del LED infrarrojo
  particleSensor.setPulseAmplitudeGreen(0);   // Apaga el LED verde
}

void loop() {
  long irValue = particleSensor.getIR();      // Lee el valor de la luz infrarroja
  long redValue = particleSensor.getRed();    // Lee el valor de la luz roja

  if (irValue < 50000) {                      // Si no hay dedo colocado (baja reflexión IR)
    beatAvg = 0;                              // Reinicia BPM
    spo2 = 0;                                 // Reinicia SpO₂
  } else {
    // Filtrado Exponencial para obtener valores DC
    irDC = irDC * 0.95 + irValue * 0.05;
    redDC = redDC * 0.95 + redValue * 0.05;

    // Obtención de componentes AC
    irAC = irValue - irDC;
    redAC = redValue - redDC;

    // Cálculo de SpO₂ si hay suficiente señal
    if (redAC > 1000 && irAC > 1000) {
      ratio = (redAC / redDC) / (irAC / irDC); // Relación de absorciones
      spo2 = 110.0 - 25.0 * ratio;             // Cálculo de SpO₂ estimado

      if (spo2 > 100) spo2 = 100;              // Límite superior
      if (spo2 < 70) spo2 = 70;                // Límite inferior
    }

    // Detección de latidos y cálculo de BPM
    if (checkForBeat(irValue)) {
      long delta = millis() - lastBeat;        // Tiempo entre latidos
      lastBeat = millis();
      beatsPerMinute = 60 / (delta / 1000.0);   // BPM calculado

      if (beatsPerMinute < 255 && beatsPerMinute > 20) {
        rates[rateSpot++] = (byte)beatsPerMinute; // Guarda BPM en arreglo
        rateSpot %= RATE_SIZE;                  // Asegura que el índice se mantenga en rango
        beatAvg = 0;
        for (byte x = 0 ; x < RATE_SIZE ; x++)   // Suma los BPM almacenados
          beatAvg += rates[x];
        beatAvg /= RATE_SIZE;                   // Promedia BPM
      }
    }
  }

  DateTime now = rtc.now();                     // Obtiene la fecha y hora actuales

  lcd.setCursor(0, 0);                           // Imprime fecha y hora en la primera línea de LCD
  lcd.print(now.day() < 10 ? "0" : ""); lcd.print(now.day()); lcd.print("/");
  lcd.print(now.month() < 10 ? "0" : ""); lcd.print(now.month()); lcd.print("/");
  lcd.print(now.year()); lcd.print(" ");
  lcd.print(now.hour() < 10 ? "0" : ""); lcd.print(now.hour()); lcd.print(":");
  lcd.print(now.minute() < 10 ? "0" : ""); lcd.print(now.minute());

  lcd.setCursor(0, 1);                           // Imprime BPM y SpO₂ en la segunda línea de LCD
  lcd.print("BPM:");
  lcd.print(beatAvg);
  lcd.print(" SpO2:");
  lcd.print((int)spo2);
  lcd.print("%   ");

  Serial.print("IR="); Serial.print(irValue);    // Imprime valores en monitor serial
  Serial.print(" Red="); Serial.print(redValue);
  Serial.print(" BPM="); Serial.print(beatAvg);
  Serial.print(" SpO2="); Serial.println(spo2, 1);
}
